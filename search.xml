<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[lorawan基站开发]]></title>
    <url>%2Flora%E5%9F%BA%E7%AB%99%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[这篇文章主要记录lora原型基站开发的过程，基站支持对接市场上默认的 LoRaWAN Server，支持有线口回传，支持4G回传。 架构 步骤 CPU 移植运行 OpenWRT 系统，有线口正常，这块我是基于现成的，此处省略 调试 SX1301 芯片驱动 移植 Semtech 公司开源的 packet_forwarder 到 OpenWRT 平台，对接通用的 LoRaWAN Server 调试移植4G模块驱动 硬件组成：CPU 使用 SOC AR95xx 系列芯片，通过 SPI 接口跟基带芯片通信，LoRa 基带射频使用 Semtech 公司的多路芯片 SX1301 + SX1255，4G 模组使用龙尚 U8300 软件：平台 OpenWRT ，版本 Attitude Adjustment 12.09，内核 3.3.8 报文流程 AR95xx 通过 HAL 模块的 SPI 读写操作控制 SX1301 接收终端发送的报文，经过 packet forwarder 模块封装打包后走有线口、WIFI 或 4G 通路，通过UDP方式发送给后台 LoRaWAN Server LoRa 芯片驱动调试AR9531 可以通过 USB 或 SPI 驱动 SX1301，USB方式需要FTDI转 SPI 芯片方式网上教程较多。由于板子限制，这里采用 SPI 方式，由于板子的 SPI 控制器已经用来驱动 flash，控制 SX1301 有两种方式： GPIO 模拟 SPI 来控制（软 SPI ） 实际的硬件 SPI 通过片选控制 为提高调试效率，先修改Makefile的 cmdline 字段波特率，以串口 ttyS0 为例下面命令可以查找包含 ttyS0 对应行，使用 VIM 修改成 115200。 1grep ttyS0 ./target/linux/ar71xx/image/Makefile GPIO 模拟 SPI 参考 https://randomcoderdude.wordpress.com/2013/08/15/spi-over-gpio-in-openwrt/ GPIO 管脚使用 先确认 GPIO 管脚是否可用，是否能拉高拉低 123456789cat /sys/kernel/debug/gpio # 查看 GPIO 调试信息cd /sys/class/gpio echo 2 &gt; export # 把 GPIO 管脚 2 导出到用户空间cd gpio2echo out &gt; direction # 配置成输出echo 0 &gt; value # 输入值 0cat value # 查看值是否改变echo 1 &gt; value # 输入值 1cat value ​ 如果CPU用到对应 GPIO 口存在 JTAG 复用的话，芯片初始化 GPIO 时把 JTAG 关掉1234//文件：linux-3.3.8/arch/mips/ath79/gpio.c//函数：ath79_gpio_initif (soc_is_qca953x()) ath79_gpio_function_enable(AR934X_GPIO_FUNC_JTAG_DISABLE); 移植编译内核模块 OpenWRT 内核默认就已经有 GPIO 模拟 SPI 的驱动模块（spi-gpio、spi-bitbang），另外有spi-dev 设备层通用驱动，用来导出到用户空间，编译内核前把这三个模块打开。spi-dev 模块问题是不大方便调试，建议下载移植 spi-gpio-custom 模块用于动态加载软 SPI 模块，根据对应 GPIO 管脚加载。 123456789101112131415161718# 参数说明* bus0 These four arguments can be arrays of* bus1 1-8 unsigned integers as follows:* bus2* bus3 &lt;id&gt;,&lt;sck&gt;,&lt;mosi&gt;,&lt;miso&gt;,&lt;mode1&gt;,&lt;maxfreq1&gt;,&lt;cs1&gt;,...* where:** &lt;id&gt; ID to used as device_id for the corresponding bus (required)* &lt;sck&gt; GPIO pin ID to be used for bus SCK (required)* &lt;mosi&gt; GPIO pin ID to be used for bus MOSI (required*)* &lt;miso&gt; GPIO pin ID to be used for bus MISO (required*)* &lt;modeX&gt; Mode configuration for slave X in the bus (required)* (see /include/linux/spi/spi.h)* &lt;maxfreqX&gt; Maximum clock frequency in Hz for slave X in the bus (required)* &lt;csX&gt; GPIO pin ID to be used for slave X CS (required**)insmod spi-gpio-custom bus0=1,14,15,16,0,1000000,4 # 加载模块ls /dev/ | grep spidev1.0 # 确认 spidev 设备是否出现，存在则加载成功 ​ 硬件SPI片选控制待完善，主要修订代码 dev-m25p80.c， 12345678910111213141516171819202122232425262728293031323334353637383940+static struct ath79_spi_controller_data ath79_spi_cdata0 =+&#123;+ .cs_type = ATH79_SPI_CS_TYPE_INTERNAL,+ .cs_line = 0,+&#125;;++static struct ath79_spi_controller_data ath79_spi_cdata1 =+&#123;+ .cs_type = ATH79_SPI_CS_TYPE_GPIO,+ .cs_line = 2,+ .is_flash = false+&#125;;++static struct spi_board_info ath79_spi_info_multi[] = &#123;+ &#123;+ .bus_num = 0,+ .chip_select = 0,+ .max_speed_hz = 25000000,+ .modalias = "m25p80",+ .controller_data = &amp;ath79_spi_cdata0,+ &#125;,+ &#123;+ .bus_num = 0,+ .chip_select = 1,+ .max_speed_hz = 25000000,+ .modalias = "spidev",+ .controller_data = &amp;ath79_spi_cdata1,+ &#125;+&#125;;++void __init ath79_register_m25p80_multidev(struct flash_platform_data *pdata)+&#123;+ multi_pdata = pdata;+ add_mtd_concat_notifier();+ ath79_spi_data.bus_num = 0;+ ath79_spi_data.num_chipselect = 2;+ ath79_spi_cdata0.is_flash = false;+ ath79_spi_info_multi[0].platform_data = pdata;+ ath79_register_spi(&amp;ath79_spi_data, ath79_spi_info_multi, 2);+&#125; LoRa转发模块移植 编译移植 LoRa 报文转发模块 下载编译 packet_forwarder 、lora_gateway 模块，lora_gateway 编译时生成 .a 库文件，供 packet_forwarder 模块调用运行报文转发程序，根据自己系统修改下 Makefile，编译完生成 lora_pkt_fwd 可执行文件以及其他测试程序。 https://github.com/Lora-net/packet_forwarder https://github.com/Lora-net/lora_gateway Note：模块 v3.0.0 版本对接 LoRaWAN Server 使用了自定义的 GWMP 协议版本 2，不兼容版本 1，对接时要注意两边版本一致 编写 packet_forwarder 起机脚本，包含了加载软 SPI 模块，复位 SX1301（手册要求），更新 local_conf 网关 MAC，启动 LoRa 转发模块，参考如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#!/bin/sh /etc/rc.commonSTART=101STOP=102insmod_gpio_custom=truereset_lora_chip=truereset_cmd="reset_lgw.sh"upgw_cmd="update_gwid.sh"cmd="lora_pkt_fwd"mod="spi-gpio-custom"configFile="local_conf.json"gpio_spi_dev="/dev/spidev1.0" # gpio simulated driverhard_spi_dev="/dev/spidev0.1" # alternative: controlled by hardware spi controllerpid_file="/var/run/$cmd.pid"stdout_log="/tmp/$cmd.log"#stderr_log="/tmp/$cmd.err"sck_pin=14mosi_pin=15miso_pin=16mode=0max_freq=10000000cs_pin=4get_pid() &#123; ps | grep -v grep | grep "$cmd" | awk '&#123;print $1&#125;'&#125;is_running() &#123; ps | grep -v grep | grep "$cmd" &gt; /dev/null [ $? = 0 ]&#125;start() &#123; if is_running; then echo "Already started" else if [ \( ! -e "$gpio_spi_dev" \) -a \( ! -e "$hard_spi_dev" \) ]; then echo "insmod custom gpio based spi" insmod $mod bus0=1,$sck_pin,$mosi_pin,$miso_pin,$mode,$max_freq,$cs_pin # 可以在代码里加载好 fi if [ "$reset_lora_chip" = true ]; then echo "Reset SX1301" chmod +x /etc/lora/"$reset_cmd" /etc/lora/"$reset_cmd" start fi echo "update gateway id" chmod +x /etc/lora/"$upgw_cmd" /etc/lora/"$upgw_cmd" /etc/lora/"$configFile" echo "Starting $cmd" /usr/sbin/"$cmd" # &gt;&gt; "$stdout_log" 2&gt;&gt; "$stdout_log" &amp; echo "$!" &gt; "$pid_file" if ! is_running; then echo "Unable to start, see $stdout_log" exit 1 else echo "Successfully started, see $stdout_log" fi fi&#125;stop() &#123; if is_running; then echo -n "Stopping $cmd.." kill `get_pid` for i in &#123;1..60&#125; do if ! is_running; then break fi echo -n "." sleep 1 done echo sleep 1 if [ "$reset_lora_chip" = true ]; then /etc/lora/$reset_cmd stop fi if [ -e "$gpio_spi_dev" ]; then echo "rmmod custom gpio based spi" rmmod $mod fi if is_running; then echo "Not stopped; may still be shutting down or shutdown may have failed" exit 1 else echo "Stopped" if [ -f "$pid_file" ]; then rm "$pid_file" fi fi else echo "Not running" fi&#125;restart() &#123; stop "$@" start "$@"&#125;status() &#123; if is_running; then echo "Running" else echo "Stopped" exit 1 fi&#125;EXTRA_COMMANDS="status"EXTRA_HELP=" status Print the status of lora packet-forward" 1/etc/init.d/packet_forwarder start # 启动 运行测试程序 Note: 运行测试程序前需先加载 spi-gpio-custom 模块，可以启动一下 /etc/init.d/packet_forwarder start 关掉，或者手动加载模块 1234# 发送功率测试，参数根据要求配置util_tx_continuous -f 433.3 -r 1255 --mod LORA --sf 7 --bw 125# 接收灵敏度测试util_rx_test -c /etc/lora/freq_conf_433.json 对接 LoRaWAN Server 只是原型的话推荐接入 Loriot.io 社区进行调试期间试用， https://cn1dashboard.loriot.io/login，也可以自己到 github 上查找开源相关自己搭建一个。 有线口回传 参考 https://wiki.openwrt.org/doc/uci/network 注意与 4G 回传二选一来配置，ping 不通时，注意查看路由表默认路由是否是4G端口 route -e，DNS 要配，LoRa 报文转发模块默认会解析 server 域名。 123456uci set network.lan.proto=static # 静态IPuci set network.lan.ipaddr=xxx.xxx.xxx.xxxuci set network.lan.gateway=xxx.xxx.xxx.xxxuci set network.lan.dns=xxx.xxx.xxx.xxxuci set network.lan.netmask=255.255.255.0uci commit 或者通过改配置文件 /etc/config/network 123456789config interface 'lan' option ifname 'eth0 eth1 ath0' option type 'bridge' # 桥模式 option force_link '1' option proto 'static' option ipaddr 'xxx.xxx.xxx.xxx' option netmask '255.255.255.0' option gateway 'xxx.xxx.xxx.xxx' option dns 'xxx.xxx.xxx.xxx' 重启网络生效 1/etc/init.d/network restart 4G模块调试 参考https://wiki.openwrt.org/doc/recipes/3gdongle http://blog.csdn.net/qianguozheng/article/details/505437044G网卡的拨号方式有三种: PPP (PPP over EV-DO, CDMA, UMTS or GPRS)，QMI (USB modems using QMI protocol)，NCM (USB modems using NCM rotocol) 配置编译使用驱动程序及工具，通过 make menuconfig 里要打开如下模块。 工具comgt USB HCIkmod-usb2 (aka EHCI)kmod-usb-ohcikmod-usb-uhci (for example VIA chips) 虚拟串口通信用kmod-usb-serial, and kmod-usb-serial-option, and kmod-usb-serial-wwan, or kmod-usb-acm 依赖库kmod-usb-core, already in 10.03 RC3 Imagechat, dependency of comgtppp, dependency of chat, already in 10.03 RC3 Imagekmod-usb-serial, dependency of kmod-usb-serial-option option 驱动加载后，出现 5 个 ttyUSB，PPP 拨号使用 ttyUSB1，AT 命令查询 ttyUSB2，数据通路走 PPP 或 QMI 拨号，两者都要修订代码 option_ids 增加 id，芯片初始化要注册USB控制器。 123//文件：linux-3.3.8/arch/mips/ath79/mach-ap120-h.c//函数：static void __init xxx_setup(void)ath79_register_usb(); 12//文件：linux-3.3.8/drivers/usb/serial/option.c&#123; USB_DEVICE(LONGSUNG_VENDOR_ID, LONGSUNG_U8300_PRODUCT_ID)&#125;, /* add for longsung U8300 LTE modem */ PPP 拨号速率支持不是最高，当前状态下够用，3.3.8 内核配置完就可支持，通过 UCI 命令配置1234567uci set wan.ifname=ppp0uci set wan.device=/dev/ttyUSB1uci set wan.apn=3gnetuci set wan.service=umtsuci set wan.dialnumber=*99#uci set wan.proto=3guci set wan.defaultroute=1 或者修改 /etc/config/network 增加 ppp0 的 wan 口 12345678config interface 'wan' option ifname 'ppp0' option device '/dev/ttyUSB1' option apn '3gnet' # 根据运营商变化注：联通apn：3gnet 电信apn：ctnet 移动apn：cmnet/cmwap option service 'umts' option dialnumber '*99#' # 联通dialnumber：3G为*99# 电信：3G为#777 移动为：*99***1# LTE为：*99# option proto '3g' option defaultroute '1' /etc/init.d/network restart 重启网络 ifconfig 查看是否出现 3G 端口 QMI拨号跟 PPP 拨号二选一， 修改代码跳过第四接口不让其被 option 驱动检测到，加载 GobiNet 模块驱动该口，支持 4G，更高速率，使用时 PPP 拨号要关掉 12345678//文件：drivers/usb/serial/option.c//函数： static int option_probe(struct usb_serial *serial, const struct usb_device_id *id)if (cpu_to_le16(serial-&gt;dev-&gt;descriptor.idVendor) == LONGSUNG_VENDOR_ID &amp;&amp; cpu_to_le16(serial-&gt;dev-&gt;descriptor.idProduct) == LONGSUNG_U8300_PRODUCT_ID &amp;&amp; serial-&gt;interface-&gt;cur_altsetting-&gt;desc.bInterfaceNumber == 4) &#123; printk(KERN_INFO"Discover the 4th interface for U8300 NDIS\n"); return -ENODEV;&#125; Gobi 芯片是高通开发的移动宽带 modem，3.3.8 内核需自己移植 GobiNet 驱动，3.4 内核以上系统自身有带 qmi_wwan 驱动，用户空间工具 ofono, uqmi and libqmi，感兴趣的可以看下 https://sigquit.wordpress.com/2014/06/11/qmiwwan-or-gobinet/ 123456789101112131415161718192021222324252627#加载模块insmod /lib/modules/3.3.8/GobiNet.ko#读返回结果cat /dev/ttyUSB2 &amp;#拨号echo -e 'at$qcrmcall=1,1\r\n' &gt; /dev/ttyUSB2#查看出现4g用接口ifconfig #查询网络服务类型echo -en "at+psrat\r" &gt; /dev/ttyUSB2#查询手机功能echo -e "at+cfun?\r" &gt; /dev/ttyUSB2#查询pin是否正常识别或是否有pin码echo -e "at+cpin?\r" &gt; /dev/ttyUSB2#查询运营商echo -e "at+cops?\r" &gt; /dev/ttyUSB2#返回IMSI号echo -en "at+cimi\r" &gt; /dev/ttyUSB2#查询IMEI号echo -e "at+cgsn\r" &gt; /dev/ttyUSB2#查询集成电路卡识别码echo -e "at+iccid\r" &gt; /dev/ttyUSB2#查询信号质量，返回rssi,rxlevelecho -e "at+csq\r" &gt; /dev/ttyUSB2 #断开连接echo -e 'at$qcrmcall=0,1\r\n' &gt; /dev/ttyUSB2 参考除了前面提到了，下面罗列一些关于 LoRaWAN 系统搭建可能会用到的代码链接。 基站端 Low-cost LoRa gateway with SX1272 and Raspberry https://github.com/CongducPham/LowCostLoRaGw This is a fork with the needed modifications to be able to use lora_gateway with a Multitech MTAC-LORA (MultiConnect mCard) board instead of a IoT Starter Kit platform.https://github.com/mirakonta/lora_gateway 模组 Semtech 开源的节点实现代码，MCU基于STM32L151CB，射频SX1272https://github.com/Lora-net/LoRaMac-node IBM 开源的节点实现代码，BSD License，支持ClassA、Bhttps://www.research.ibm.com/labs/zurich/ics/lrsc/lmic.html LoRaWAN Serverlorawan server开源实现，MIT授权，可以参考实现 go语言 the things network社区，15年10月就开始做了，比较完整https://github.com/TheThingsNetwork/ttnV1版本源码：https://github.com/TheThingsNetwork/ttn/tree/v1-stagingTTN官网：https://www.thethingsnetwork.orgTTN架构：https://www.thethingsnetwork.org/wiki/Backend/Overviewttnctl CLI：https://www.thethingsnetwork.org/docs/current/cli/后台：https://account.thethingsnetwork.org go语言，16年2月开始做的，跟TTN很像https://github.com/brocaar/loraserver/ erlang语言，适合小型网络使用，只有1个人在开发https://github.com/gotthardp/lorawan-server Simulationhttps://sites.google.com/a/wesdec.be/mweyn/lpwan Semtech Starter Kithttp://semtechlorakit.blogspot.jp/]]></content>
      <categories>
        <category>嵌入式开发</category>
      </categories>
      <tags>
        <tag>lora</tag>
        <tag>OpenWRT</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo blog搭建]]></title>
    <url>%2Fhexo-blog%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[安装nvm nodejshttps://github.com/creationix/nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh | bashexport NVM_DIR=”$HOME/.nvm”[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvmnvm install nodenvm use 9.0.0 安装运行hexonpm install -g cnpm –registry=https://registry.npm.taobao.org #淘宝定制命令cnpm替换，使用淘宝源 cnpm install hexo-cli -ghexo init blogcd blogcnpm installhexo server 自动部署github123456789101112131415161718npm install hexo-deployer-git --save在配置文件_config.xml中作如下修改deploy: type: git repo: git@github.com:hgleagle/hgleagle.github.io.git branch: masterhexo clean #先清除hexo generate #生成静态文件hexo deploy #部署，实现如下命令```shellhexo generatecp -R public/* .deploy/jiji262.github.iocd .deploy/jiji262.github.iogit add .git commit -m “update”git push origin master 或者下面两者之一12$ hexo generate --deploy$ hexo deploy --generate 文章目录显示npm i hexo-generator-json-content –save 注册添加disqus评论disqus_shortname: https-hgleagle-github-io #修改yilia/_config.yml ####$ npm install hexo-generator-feed$ npm install hexo-generator-sitemap avatar、qrcode使用七牛图床，或者本地在source下创建img目录保存图片，修改_config.yml添加外链或路径 注册绑定自定义域名namesilo注册申请域名，只需要35块，赠送whois隐私保护到dnspod绑定域名服务器，创建两个A，一个CNAME记录绑定域名https://www.namesilo.com/create_account.php 搜索1npm install --save hexo-generator-search 标签云1hexo new page tags Sitemap for SEO 参考https://pengbinlee.github.io/Hexo-NexT-%E4%B8%BB%E9%A2%98%E7%9A%84-SEO%E4%BC%98%E5%8C%96/ 生成 sitemap 提交到 google、 baidu，修改配置文件12npm install --save hexo-generator-seo-friendly-sitemapnpm install --save hexo-generator-baidu-sitemap 通过搜索引擎查找 site:jasonfly.me 检查是否被收录 添加 robots.txt 协议 修改 next 主题 siderbar.swig footer.swig 增加 rel=&quot;external nofollow&quot;，意思是告诉引擎这些是外链，不要爬取 默认 permalink 太长，缩短成 :title 修改 scaffolds 中 post.md 模板增加 keywords: description: TODO]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
