<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jasonfly.me/"/>
  <updated>2017-11-30T13:10:39.011Z</updated>
  <id>http://jasonfly.me/</id>
  
  <author>
    <name>Jason He</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lorawan基站开发</title>
    <link href="http://jasonfly.me/2017/11/30/lora%E5%9F%BA%E7%AB%99%E5%BC%80%E5%8F%91/"/>
    <id>http://jasonfly.me/2017/11/30/lora基站开发/</id>
    <published>2017-11-30T13:10:39.015Z</published>
    <updated>2017-11-30T13:10:39.011Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要记录lora原型基站开发的过程，基站支持对接市场上默认的 LoRaWAN Server，支持有线口回传，支持4G回传。</p><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><ul><li>步骤<ul><li>CPU 移植运行 OpenWRT  系统，有线口正常，这块我是基于现成的，此处省略</li><li>调试 SX1301 芯片驱动</li><li>移植 Semtech 公司开源的 <code>packet_forwarder</code> 到 OpenWRT 平台，对接通用的 LoRaWAN Server</li><li>调试移植4G模块驱动</li></ul></li><li>硬件组成：CPU 使用 SOC AR95xx 系列芯片，通过 SPI 接口跟基带芯片通信，LoRa 基带射频使用 Semtech 公司的多路芯片 SX1301 + SX1255，4G 模组使用龙尚 U8300</li><li>软件：平台 OpenWRT ，版本 Attitude Adjustment 12.09，内核 3.3.8</li><li>报文流程<ul><li>AR95xx 通过 <code>HAL</code> 模块的 SPI 读写操作控制 SX1301 接收终端发送的报文，经过 <code>packet forwarder</code> 模块封装打包后走有线口、WIFI 或 4G 通路，通过UDP方式发送给后台 LoRaWAN Server<br><img src="../img/1474594710711.png" alt=".1474594710711"></li></ul></li></ul><h2 id="LoRa-芯片驱动调试"><a href="#LoRa-芯片驱动调试" class="headerlink" title="LoRa 芯片驱动调试"></a>LoRa 芯片驱动调试</h2><p>AR9531 可以通过 USB 或 SPI 驱动 SX1301，USB方式需要FTDI转 SPI 芯片方式网上教程较多。由于板子限制，这里采用 SPI 方式，由于板子的 SPI 控制器已经用来驱动 flash，控制 SX1301 有两种方式：</p><ul><li>GPIO   模拟 SPI 来控制（软 SPI ）</li><li>实际的硬件 SPI 通过片选控制</li></ul><p>为提高调试效率，先修改Makefile的 <code>cmdline</code> 字段波特率，以串口 ttyS0 为例下面命令可以查找包含 ttyS0 对应行，使用 VIM 修改成 115200。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep ttyS0 ./target/linux/ar71xx/image/Makefile</div></pre></td></tr></table></figure><h3 id="GPIO-模拟-SPI"><a href="#GPIO-模拟-SPI" class="headerlink" title="GPIO   模拟 SPI"></a>GPIO   模拟 SPI</h3><blockquote><p>参考</p><p> <a href="https://randomcoderdude.wordpress.com/2013/08/15/spi-over-gpio-in-openwrt/" target="_blank" rel="external">https://randomcoderdude.wordpress.com/2013/08/15/spi-over-gpio-in-openwrt/</a></p></blockquote><ul><li><p>GPIO   管脚使用</p><p><strong>先确认  GPIO   管脚是否可用，是否能拉高拉低</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">cat /sys/kernel/debug/gpio  # 查看 GPIO 调试信息</div><div class="line">cd /sys/class/gpio   </div><div class="line">echo 2 &gt; export   # 把 GPIO 管脚 2 导出到用户空间</div><div class="line">cd gpio2</div><div class="line">echo out &gt; direction   # 配置成输出</div><div class="line">echo 0 &gt; value   # 输入值 0</div><div class="line">cat value    # 查看值是否改变</div><div class="line">echo 1 &gt; value  # 输入值 1</div><div class="line">cat value</div></pre></td></tr></table></figure></li></ul><p>​    <strong>如果CPU用到对应 GPIO 口存在 JTAG 复用的话，芯片初始化 GPIO 时把 JTAG 关掉</strong><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件：linux-3.3.8/arch/mips/ath79/gpio.c</span></div><div class="line"><span class="comment">//函数：ath79_gpio_init</span></div><div class="line"><span class="keyword">if</span> (soc_is_qca953x())</div><div class="line">    ath79_gpio_function_enable(AR934X_GPIO_FUNC_JTAG_DISABLE);</div></pre></td></tr></table></figure></p><ul><li><p>移植编译内核模块</p><p>OpenWRT 内核默认就已经有 GPIO 模拟 SPI 的驱动模块（<code>spi-gpio</code>、<code>spi-bitbang</code>），另外有<code>spi-dev</code> 设备层通用驱动，用来导出到用户空间，编译内核前把这三个模块打开。<code>spi-dev</code> 模块问题是不大方便调试，建议下载移植 <code>spi-gpio-custom</code> 模块用于动态加载软 SPI 模块，根据对应 GPIO 管脚加载。</p><p><img src="../img/1512043234704.png" alt="1512043234704"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></div><div class="line">* bus0    These four arguments can be arrays of</div><div class="line">* bus1    1-8 unsigned integers as follows:</div><div class="line">* bus2</div><div class="line">* bus3    &lt;id&gt;,&lt;sck&gt;,&lt;mosi&gt;,&lt;miso&gt;,&lt;mode1&gt;,&lt;maxfreq1&gt;,&lt;cs1&gt;,...</div><div class="line">* where:</div><div class="line">*</div><div class="line">* &lt;id&gt; ID to used as device_id for the corresponding bus (required)</div><div class="line">* &lt;sck&gt; GPIO pin ID to be used for bus SCK (required)</div><div class="line">* &lt;mosi&gt; GPIO pin ID to be used for bus MOSI (required*)</div><div class="line">* &lt;miso&gt; GPIO pin ID to be used for bus MISO (required*)</div><div class="line">* &lt;modeX&gt; Mode configuration for slave X in the bus (required)</div><div class="line">* (see /include/linux/spi/spi.h)</div><div class="line">* &lt;maxfreqX&gt; Maximum clock frequency in Hz for slave X in the bus (required)</div><div class="line">* &lt;csX&gt; GPIO pin ID to be used for slave X CS (required**)</div><div class="line"></div><div class="line">insmod spi-gpio-custom bus0=1,14,15,16,0,1000000,4  # 加载模块</div><div class="line">ls /dev/ | grep spidev1.0   # 确认 spidev 设备是否出现，存在则加载成功</div></pre></td></tr></table></figure><p>​</p></li></ul><h3 id="硬件SPI片选控制"><a href="#硬件SPI片选控制" class="headerlink" title="硬件SPI片选控制"></a>硬件SPI片选控制</h3><p>待完善，主要修订代码 dev-m25p80.c，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">+<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">ath79_spi_controller_data</span> <span class="title">ath79_spi_cdata0</span> =</span></div><div class="line"><span class="class">+&#123;</span></div><div class="line">+.cs_type = ATH79_SPI_CS_TYPE_INTERNAL,</div><div class="line">+.cs_line = <span class="number">0</span>,</div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">ath79_spi_controller_data</span> <span class="title">ath79_spi_cdata1</span> =</span></div><div class="line"><span class="class">+&#123;</span></div><div class="line">+.cs_type = ATH79_SPI_CS_TYPE_GPIO,</div><div class="line">+.cs_line = <span class="number">2</span>,</div><div class="line">+   .is_flash = <span class="literal">false</span></div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+<span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">spi_board_info</span> <span class="title">ath79_spi_info_multi</span>[] = &#123;</span></div><div class="line">+&#123;</div><div class="line">+.bus_num= <span class="number">0</span>,</div><div class="line">+.chip_select= <span class="number">0</span>,</div><div class="line">+.max_speed_hz= <span class="number">25000000</span>,</div><div class="line">+.modalias= <span class="string">"m25p80"</span>,</div><div class="line">+.controller_data = &amp;ath79_spi_cdata0,</div><div class="line">+&#125;,</div><div class="line">+&#123;</div><div class="line">+.bus_num= <span class="number">0</span>,</div><div class="line">+.chip_select= <span class="number">1</span>,</div><div class="line">+.max_speed_hz   = <span class="number">25000000</span>,</div><div class="line">+.modalias= <span class="string">"spidev"</span>,</div><div class="line">+.controller_data = &amp;ath79_spi_cdata1,</div><div class="line">+&#125;</div><div class="line">+&#125;;</div><div class="line">+</div><div class="line">+<span class="keyword">void</span> __<span class="function">init <span class="title">ath79_register_m25p80_multidev</span><span class="params">(struct flash_platform_data *pdata)</span></span></div><div class="line">+&#123;</div><div class="line">+multi_pdata = pdata;</div><div class="line">+add_mtd_concat_notifier();</div><div class="line">+ath79_spi_data.bus_num = <span class="number">0</span>;</div><div class="line">+ath79_spi_data.num_chipselect = <span class="number">2</span>;</div><div class="line">+ath79_spi_cdata0.is_flash = <span class="literal">false</span>;</div><div class="line">+ath79_spi_info_multi[<span class="number">0</span>].platform_data = pdata;</div><div class="line">+ath79_register_spi(&amp;ath79_spi_data, ath79_spi_info_multi, <span class="number">2</span>);</div><div class="line">+&#125;</div></pre></td></tr></table></figure><h2 id="LoRa转发模块移植"><a href="#LoRa转发模块移植" class="headerlink" title="LoRa转发模块移植"></a>LoRa转发模块移植</h2><ul><li><p>编译移植 LoRa 报文转发模块</p><p>下载编译 <code>packet_forwarder</code> 、<code>lora_gateway</code>  模块，<code>lora_gateway</code> 编译时生成 .a 库文件，供 <code>packet_forwarder</code> 模块调用运行报文转发程序，根据自己系统修改下 <code>Makefile</code>，编译完生成 <code>lora_pkt_fwd</code> 可执行文件以及其他测试程序。</p><p><a href="https://github.com/Lora-net/packet_forwarder" target="_blank" rel="external">https://github.com/Lora-net/packet_forwarder</a></p><p><a href="https://github.com/Lora-net/lora_gateway" target="_blank" rel="external">https://github.com/Lora-net/lora_gateway</a></p><blockquote><p>Note：模块 v3.0.0 版本对接 LoRaWAN Server 使用了自定义的 GWMP 协议版本 2，不兼容版本 1，对接时要注意两边版本一致</p></blockquote></li></ul><ul><li>编写 <code>packet_forwarder</code> 起机脚本，包含了加载软 SPI 模块，复位 SX1301（手册要求），更新 <code>local_conf</code> 网关 MAC，启动 LoRa 转发模块，参考如下</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">!/bin/sh /etc/rc.common</span></div><div class="line"></div><div class="line">START=101</div><div class="line">STOP=102</div><div class="line">insmod_gpio_custom=true</div><div class="line">reset_lora_chip=true</div><div class="line">reset_cmd="reset_lgw.sh"</div><div class="line">upgw_cmd="update_gwid.sh"</div><div class="line">cmd="lora_pkt_fwd"</div><div class="line">mod="spi-gpio-custom"</div><div class="line">configFile="local_conf.json"</div><div class="line">gpio_spi_dev="/dev/spidev1.0" # gpio simulated driver</div><div class="line">hard_spi_dev="/dev/spidev0.1" # alternative: controlled by hardware spi controller</div><div class="line">pid_file="/var/run/$cmd.pid"</div><div class="line">stdout_log="/tmp/$cmd.log"</div><div class="line"><span class="meta">#</span><span class="bash">stderr_log=<span class="string">"/tmp/<span class="variable">$cmd</span>.err"</span></span></div><div class="line">sck_pin=14</div><div class="line">mosi_pin=15</div><div class="line">miso_pin=16</div><div class="line">mode=0</div><div class="line">max_freq=10000000</div><div class="line">cs_pin=4</div><div class="line"></div><div class="line">get_pid() &#123;</div><div class="line">ps | grep -v grep | grep "$cmd" | awk '&#123;print $1&#125;'</div><div class="line">&#125;</div><div class="line"></div><div class="line">is_running() &#123;</div><div class="line">ps | grep -v grep | grep "$cmd" &gt; /dev/null </div><div class="line">[ $? = 0 ]</div><div class="line">&#125;</div><div class="line"></div><div class="line">start() &#123;</div><div class="line">if is_running; then</div><div class="line">echo "Already started"</div><div class="line">else</div><div class="line">if [ \( ! -e "$gpio_spi_dev" \) -a \( ! -e "$hard_spi_dev" \) ]; then</div><div class="line">echo "insmod custom gpio based spi"</div><div class="line">insmod $mod bus0=1,$sck_pin,$mosi_pin,$miso_pin,$mode,$max_freq,$cs_pin  # 可以在代码里加载好</div><div class="line"></div><div class="line">fi</div><div class="line"></div><div class="line">if [ "$reset_lora_chip" = true ]; then</div><div class="line">echo "Reset SX1301"</div><div class="line">chmod +x /etc/lora/"$reset_cmd"</div><div class="line">/etc/lora/"$reset_cmd" start  </div><div class="line">fi</div><div class="line">echo "update gateway id"</div><div class="line">chmod +x /etc/lora/"$upgw_cmd"</div><div class="line">/etc/lora/"$upgw_cmd" /etc/lora/"$configFile"</div><div class="line">echo "Starting $cmd"</div><div class="line">/usr/sbin/"$cmd" # &gt;&gt; "$stdout_log" 2&gt;&gt; "$stdout_log" &amp;</div><div class="line">echo "$!" &gt; "$pid_file"</div><div class="line">if ! is_running; then</div><div class="line">echo "Unable to start, see $stdout_log"</div><div class="line">exit 1</div><div class="line">else</div><div class="line">echo "Successfully started, see $stdout_log"</div><div class="line">fi</div><div class="line">fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">stop() &#123;</div><div class="line">if is_running; then</div><div class="line">echo -n "Stopping $cmd.."</div><div class="line">kill `get_pid`</div><div class="line">for i in &#123;1..60&#125;</div><div class="line">do</div><div class="line">if ! is_running; then</div><div class="line">break</div><div class="line">fi</div><div class="line"></div><div class="line">echo -n "."</div><div class="line">sleep 1</div><div class="line">done</div><div class="line">echo</div><div class="line">sleep 1</div><div class="line">if [ "$reset_lora_chip" = true ]; then</div><div class="line">/etc/lora/$reset_cmd stop </div><div class="line">fi</div><div class="line"></div><div class="line">if [ -e "$gpio_spi_dev" ]; then</div><div class="line">echo "rmmod custom gpio based spi"</div><div class="line">rmmod $mod </div><div class="line">fi</div><div class="line"></div><div class="line">if is_running; then</div><div class="line">echo "Not stopped; may still be shutting down or shutdown may have failed"</div><div class="line">exit 1</div><div class="line">else</div><div class="line">echo "Stopped"</div><div class="line">if [ -f "$pid_file" ]; then</div><div class="line">rm "$pid_file"</div><div class="line">fi</div><div class="line">fi</div><div class="line">else</div><div class="line">echo "Not running"</div><div class="line">fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">restart() &#123;</div><div class="line">stop "$@"</div><div class="line">start "$@"</div><div class="line">&#125;</div><div class="line"></div><div class="line">status() &#123;</div><div class="line">if is_running; then</div><div class="line">echo "Running"</div><div class="line">else</div><div class="line">echo "Stopped"</div><div class="line">exit 1</div><div class="line">fi</div><div class="line">&#125;</div><div class="line"></div><div class="line">EXTRA_COMMANDS="status"</div><div class="line">EXTRA_HELP="status Print the status of lora packet-forward"</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/packet_forwarder start  # 启动</div></pre></td></tr></table></figure><ul><li>运行测试程序</li></ul><blockquote><p>Note: 运行测试程序前需先加载 <code>spi-gpio-custom</code> 模块，可以启动一下 /etc/init.d/packet_forwarder start 关掉，或者手动加载模块</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 发送功率测试，参数根据要求配置</span></div><div class="line">util_tx_continuous -f 433.3 -r 1255 --mod LORA --sf 7 --bw 125</div><div class="line"><span class="meta">#</span><span class="bash"> 接收灵敏度测试</span></div><div class="line">util_rx_test -c /etc/lora/freq_conf_433.json</div></pre></td></tr></table></figure><ul><li><p>对接 LoRaWAN Server</p><p>只是原型的话推荐接入 Loriot.io 社区进行调试期间试用， <a href="https://cn1dashboard.loriot.io/login，也可以自己到" target="_blank" rel="external">https://cn1dashboard.loriot.io/login，也可以自己到</a> github 上查找开源相关自己搭建一个。</p></li></ul><h2 id="有线口回传"><a href="#有线口回传" class="headerlink" title="有线口回传"></a>有线口回传</h2><blockquote><p>参考 <a href="https://wiki.openwrt.org/doc/uci/network" target="_blank" rel="external">https://wiki.openwrt.org/doc/uci/network</a></p></blockquote><p>注意与 4G 回传二选一来配置，ping 不通时，注意查看路由表默认路由是否是4G端口 <code>route -e</code>，DNS 要配，LoRa 报文转发模块默认会解析 server 域名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">uci set network.lan.proto=static  # 静态IP</div><div class="line">uci set network.lan.ipaddr=xxx.xxx.xxx.xxx</div><div class="line">uci set network.lan.gateway=xxx.xxx.xxx.xxx</div><div class="line">uci set network.lan.dns=xxx.xxx.xxx.xxx</div><div class="line">uci set network.lan.netmask=255.255.255.0</div><div class="line">uci commit</div></pre></td></tr></table></figure><p>或者通过改配置文件 <code>/etc/config/network</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">config interface 'lan'</div><div class="line">        option ifname 'eth0 eth1 ath0'</div><div class="line">        option type 'bridge'  # 桥模式</div><div class="line">        option force_link '1'</div><div class="line">        option proto 'static'</div><div class="line">        option ipaddr 'xxx.xxx.xxx.xxx'</div><div class="line">        option netmask '255.255.255.0' </div><div class="line">        option gateway 'xxx.xxx.xxx.xxx'</div><div class="line">        option dns 'xxx.xxx.xxx.xxx'</div></pre></td></tr></table></figure><p>重启网络生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/etc/init.d/network restart</div></pre></td></tr></table></figure><h2 id="4G模块调试"><a href="#4G模块调试" class="headerlink" title="4G模块调试"></a>4G模块调试</h2><blockquote><p>参考<br><a href="https://wiki.openwrt.org/doc/recipes/3gdongle" target="_blank" rel="external">https://wiki.openwrt.org/doc/recipes/3gdongle</a></p><p><a href="http://blog.csdn.net/qianguozheng/article/details/50543704" target="_blank" rel="external">http://blog.csdn.net/qianguozheng/article/details/50543704</a><br>4G网卡的拨号方式有三种: PPP (PPP over EV-DO, CDMA, UMTS or GPRS)，QMI (USB modems using QMI protocol)，NCM (USB modems using NCM rotocol)</p></blockquote><h3 id="配置编译"><a href="#配置编译" class="headerlink" title="配置编译"></a>配置编译</h3><p>使用驱动程序及工具，通过 <code>make menuconfig</code> 里要打开如下模块。</p><ul><li>工具<br>comgt </li><li>USB HCI<br>kmod-usb2 (aka EHCI)<br>kmod-usb-ohci<br>kmod-usb-uhci (for example VIA chips)</li><li>虚拟串口通信用<br>kmod-usb-serial, and kmod-usb-serial-option, and kmod-usb-serial-wwan, or kmod-usb-acm</li><li>依赖库<br>kmod-usb-core, already in 10.03 RC3 Image<br>chat, dependency of comgt<br>ppp, dependency of chat, already in 10.03 RC3 Image<br>kmod-usb-serial, dependency of kmod-usb-serial-option</li></ul><p>option 驱动加载后，出现 5 个 ttyUSB，PPP 拨号使用 ttyUSB1，AT 命令查询 ttyUSB2，数据通路走 PPP 或 QMI 拨号，两者都要修订代码 option_ids 增加 id，<strong>芯片初始化要注册USB控制器</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件：linux-3.3.8/arch/mips/ath79/mach-ap120-h.c</span></div><div class="line"><span class="comment">//函数：static void __init xxx_setup(void)</span></div><div class="line">ath79_register_usb();</div></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件：linux-3.3.8/drivers/usb/serial/option.c</span></div><div class="line">&#123; USB_DEVICE(LONGSUNG_VENDOR_ID, LONGSUNG_U8300_PRODUCT_ID)&#125;,  <span class="comment">/* add for longsung U8300 LTE modem */</span></div></pre></td></tr></table></figure><h3 id="PPP-拨号"><a href="#PPP-拨号" class="headerlink" title="PPP 拨号"></a>PPP 拨号</h3><p>速率支持不是最高，当前状态下够用，3.3.8 内核配置完就可支持，通过 UCI 命令配置<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">uci set wan.ifname=ppp0</div><div class="line">uci set wan.device=/dev/ttyUSB1</div><div class="line">uci set wan.apn=3gnet</div><div class="line">uci set wan.service=umts</div><div class="line">uci set wan.dialnumber=*99#</div><div class="line">uci set wan.proto=3g</div><div class="line">uci set wan.defaultroute=1</div></pre></td></tr></table></figure></p><p>或者修改 <code>/etc/config/network</code>  增加 ppp0 的 wan 口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">config interface 'wan'</div><div class="line">        option ifname 'ppp0'</div><div class="line">        option device '/dev/ttyUSB1'</div><div class="line">        option apn    '3gnet'  # 根据运营商变化注：联通apn：3gnet 电信apn：ctnet 移动apn：cmnet/cmwap</div><div class="line">        option service 'umts'  </div><div class="line">        option dialnumber '*99#'   # 联通dialnumber：3G为*99# 电信：3G为#777 移动为：*99***1# LTE为：*99#</div><div class="line">        option proto '3g'</div><div class="line">        option defaultroute '1'</div></pre></td></tr></table></figure><p><code>/etc/init.d/network restart</code> 重启网络</p><p> <code>ifconfig</code> 查看是否出现 3G 端口</p><h3 id="QMI拨号"><a href="#QMI拨号" class="headerlink" title="QMI拨号"></a>QMI拨号</h3><p>跟 PPP 拨号二选一， <strong>修改代码跳过第四接口不让其被 option 驱动检测到</strong>，加载 GobiNet 模块驱动该口，支持 4G，更高速率，使用时 PPP 拨号要关掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//文件：drivers/usb/serial/option.c</span></div><div class="line"><span class="comment">//函数： static int option_probe(struct usb_serial *serial, const struct usb_device_id *id)</span></div><div class="line"><span class="keyword">if</span> (cpu_to_le16(serial-&gt;dev-&gt;descriptor.idVendor) == LONGSUNG_VENDOR_ID &amp;&amp;</div><div class="line">    cpu_to_le16(serial-&gt;dev-&gt;descriptor.idProduct) == LONGSUNG_U8300_PRODUCT_ID &amp;&amp;</div><div class="line">    serial-&gt;interface-&gt;cur_altsetting-&gt;desc.bInterfaceNumber == <span class="number">4</span>) &#123;</div><div class="line">    printk(KERN_INFO<span class="string">"Discover the 4th interface for U8300 NDIS\n"</span>);</div><div class="line">    <span class="keyword">return</span> -ENODEV;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Gobi 芯片是高通开发的移动宽带 modem，3.3.8 内核需自己移植 <code>GobiNet</code> 驱动，3.4 内核以上系统自身有带 <code>qmi_wwan</code> 驱动，用户空间工具 <code>ofono, uqmi and libqmi</code>，感兴趣的可以看下 <a href="https://sigquit.wordpress.com/2014/06/11/qmiwwan-or-gobinet/" target="_blank" rel="external">https://sigquit.wordpress.com/2014/06/11/qmiwwan-or-gobinet/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash">加载模块</span></div><div class="line">insmod /lib/modules/3.3.8/GobiNet.ko</div><div class="line"><span class="meta">#</span><span class="bash">读返回结果</span></div><div class="line">cat /dev/ttyUSB2 &amp;</div><div class="line"><span class="meta">#</span><span class="bash">拨号</span></div><div class="line">echo -e 'at$qcrmcall=1,1\r\n' &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查看出现4g用接口</span></div><div class="line">ifconfig </div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash">查询网络服务类型</span></div><div class="line">echo -en "at+psrat\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询手机功能</span></div><div class="line">echo -e "at+cfun?\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询pin是否正常识别或是否有pin码</span></div><div class="line">echo -e "at+cpin?\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询运营商</span></div><div class="line">echo -e "at+cops?\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">返回IMSI号</span></div><div class="line">echo -en "at+cimi\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询IMEI号</span></div><div class="line">echo -e "at+cgsn\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询集成电路卡识别码</span></div><div class="line">echo -e "at+iccid\r" &gt; /dev/ttyUSB2</div><div class="line"><span class="meta">#</span><span class="bash">查询信号质量，返回rssi,rxlevel</span></div><div class="line">echo -e "at+csq\r" &gt; /dev/ttyUSB2 </div><div class="line"><span class="meta">#</span><span class="bash">断开连接</span></div><div class="line">echo -e 'at$qcrmcall=0,1\r\n' &gt; /dev/ttyUSB2</div></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>除了前面提到了，下面罗列一些关于 LoRaWAN 系统搭建可能会用到的代码链接。</p><h3 id="基站端"><a href="#基站端" class="headerlink" title="基站端"></a>基站端</h3><ul><li><p>Low-cost LoRa gateway with SX1272 and Raspberry</p></li><li><p><a href="https://github.com/CongducPham/LowCostLoRaGw" target="_blank" rel="external">https://github.com/CongducPham/LowCostLoRaGw</a></p></li><li><p>This is a fork with the needed modifications to be able to use lora_gateway with a Multitech MTAC-LORA (MultiConnect mCard) board instead of a IoT Starter Kit platform.<br><a href="https://github.com/mirakonta/lora_gateway" target="_blank" rel="external">https://github.com/mirakonta/lora_gateway</a></p></li></ul><h3 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h3><ul><li><p>Semtech 开源的节点实现代码，MCU基于STM32L151CB，射频SX1272<br><a href="https://github.com/Lora-net/LoRaMac-node" target="_blank" rel="external">https://github.com/Lora-net/LoRaMac-node</a></p></li><li><p>IBM 开源的节点实现代码，BSD License，支持ClassA、B<br><a href="https://www.research.ibm.com/labs/zurich/ics/lrsc/lmic.html" target="_blank" rel="external">https://www.research.ibm.com/labs/zurich/ics/lrsc/lmic.html</a></p></li></ul><h3 id="LoRaWAN-Server"><a href="#LoRaWAN-Server" class="headerlink" title="LoRaWAN Server"></a>LoRaWAN Server</h3><p>lorawan server开源实现，MIT授权，可以参考实现</p><ul><li><p>go语言 the things network社区，15年10月就开始做了，比较完整<br><a href="https://github.com/TheThingsNetwork/ttn" target="_blank" rel="external">https://github.com/TheThingsNetwork/ttn</a><br>V1版本源码：<a href="https://github.com/TheThingsNetwork/ttn/tree/v1-staging" target="_blank" rel="external">https://github.com/TheThingsNetwork/ttn/tree/v1-staging</a><br>TTN官网：<a href="https://www.thethingsnetwork.org" target="_blank" rel="external">https://www.thethingsnetwork.org</a><br>TTN架构：<a href="https://www.thethingsnetwork.org/wiki/Backend/Overview" target="_blank" rel="external">https://www.thethingsnetwork.org/wiki/Backend/Overview</a><br>ttnctl CLI：<a href="https://www.thethingsnetwork.org/docs/current/cli/" target="_blank" rel="external">https://www.thethingsnetwork.org/docs/current/cli/</a><br>后台：<a href="https://account.thethingsnetwork.org" target="_blank" rel="external">https://account.thethingsnetwork.org</a></p></li><li><p>go语言，16年2月开始做的，跟TTN很像<br><a href="https://github.com/brocaar/loraserver/" target="_blank" rel="external">https://github.com/brocaar/loraserver/</a></p></li><li><p>erlang语言，适合小型网络使用，只有1个人在开发<br><a href="https://github.com/gotthardp/lorawan-server" target="_blank" rel="external">https://github.com/gotthardp/lorawan-server</a></p></li></ul><h3 id="Simulation"><a href="#Simulation" class="headerlink" title="Simulation"></a>Simulation</h3><p><a href="https://sites.google.com/a/wesdec.be/mweyn/lpwan" target="_blank" rel="external">https://sites.google.com/a/wesdec.be/mweyn/lpwan</a></p><h3 id="Semtech-Starter-Kit"><a href="#Semtech-Starter-Kit" class="headerlink" title="Semtech Starter Kit"></a>Semtech Starter Kit</h3><p><a href="http://semtechlorakit.blogspot.jp/" target="_blank" rel="external">http://semtechlorakit.blogspot.jp/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇文章主要记录lora原型基站开发的过程，基站支持对接市场上默认的 LoRaWAN Server，支持有线口回传，支持4G回传。&lt;/p&gt;
&lt;h2 id=&quot;架构&quot;&gt;&lt;a href=&quot;#架构&quot; class=&quot;headerlink&quot; title=&quot;架构&quot;&gt;&lt;/a&gt;架构&lt;/h2&gt;
      
    
    </summary>
    
      <category term="嵌入式开发" scheme="http://jasonfly.me/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="lora" scheme="http://jasonfly.me/tags/lora/"/>
    
      <category term="OpenWRT" scheme="http://jasonfly.me/tags/OpenWRT/"/>
    
      <category term="C" scheme="http://jasonfly.me/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jasonfly.me/2017/11/08/hello-world/"/>
    <id>http://jasonfly.me/2017/11/08/hello-world/</id>
    <published>2017-11-08T07:07:10.057Z</published>
    <updated>2017-11-05T09:33:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo blog搭建</title>
    <link href="http://jasonfly.me/2017/11/05/hexo-blog%E6%90%AD%E5%BB%BA/"/>
    <id>http://jasonfly.me/2017/11/05/hexo-blog搭建/</id>
    <published>2017-11-05T14:36:26.000Z</published>
    <updated>2017-11-30T13:18:46.887Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装nvm-nodejs"><a href="#安装nvm-nodejs" class="headerlink" title="安装nvm nodejs"></a>安装nvm nodejs</h4><p><a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a></p><p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh" target="_blank" rel="external">https://raw.githubusercontent.com/creationix/nvm/v0.33.6/install.sh</a> | bash<br>export NVM_DIR=”$HOME/.nvm”<br>[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh” # This loads nvm<br>nvm install node<br>nvm use 9.0.0</p><h4 id="安装运行hexo"><a href="#安装运行hexo" class="headerlink" title="安装运行hexo"></a>安装运行hexo</h4><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a>  #淘宝定制命令cnpm替换，使用淘宝源</p><p>cnpm install hexo-cli -g<br>hexo init blog<br>cd blog<br>cnpm install<br>hexo server</p><h4 id="自动部署github"><a href="#自动部署github" class="headerlink" title="自动部署github"></a>自动部署github</h4><p>npm install hexo-deployer-git –save<br>在配置文件_config.xml中作如下修改<br>deploy:<br>  type: git<br>  repo: git@github.com:hgleagle/hgleagle.github.io.git<br>  branch: master</p><p>hexo clean #先清除<br>hexo generate #生成静态文件<br>hexo deploy #部署，实现如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">hexo generate</div><div class="line">cp -R public/* .deploy/jiji262.github.io</div><div class="line">cd .deploy/jiji262.github.io</div><div class="line">git add .</div><div class="line">git commit -m “update”</div><div class="line">git push origin master</div></pre></td></tr></table></figure></p><p>或者下面两者之一<br>$ hexo generate –deploy<br>$ hexo deploy –generate</p><h4 id="文章目录显示"><a href="#文章目录显示" class="headerlink" title="文章目录显示"></a>文章目录显示</h4><p>npm i hexo-generator-json-content –save</p><h4 id="注册添加disqus评论"><a href="#注册添加disqus评论" class="headerlink" title="注册添加disqus评论"></a>注册添加disqus评论</h4><p>disqus_shortname: https-hgleagle-github-io #修改yilia/_config.yml</p><p>####<br>$ npm install hexo-generator-feed<br>$ npm install hexo-generator-sitemap</p><h4 id="avatar、qrcode"><a href="#avatar、qrcode" class="headerlink" title="avatar、qrcode"></a>avatar、qrcode</h4><p>使用七牛图床，或者本地在source下创建img目录保存图片，修改_config.yml添加外链或路径</p><h4 id="注册绑定自定义域名"><a href="#注册绑定自定义域名" class="headerlink" title="注册绑定自定义域名"></a>注册绑定自定义域名</h4><p>namesilo注册申请域名，只需要35块，赠送whois隐私保护<br>到dnspod绑定域名服务器，创建两个A，一个CNAME记录绑定域名<br><a href="https://www.namesilo.com/create_account.php" target="_blank" rel="external">https://www.namesilo.com/create_account.php</a></p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>npm install –save hexo-generator-search</p><h4 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h4><p>hexo new page tags</p><h4 id="Sitemap-for-SEO"><a href="#Sitemap-for-SEO" class="headerlink" title="Sitemap for SEO:"></a>Sitemap for SEO:</h4><p>Install plugin: hexo-generator-seo-friendly-sitemap</p><p>Baidu: hexo-generator-baidu-sitemap</p><h4 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h4><p> [ ] 404页面<br> [ ] SEO</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;安装nvm-nodejs&quot;&gt;&lt;a href=&quot;#安装nvm-nodejs&quot; class=&quot;headerlink&quot; title=&quot;安装nvm nodejs&quot;&gt;&lt;/a&gt;安装nvm nodejs&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/cr
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://jasonfly.me/tags/hexo/"/>
    
  </entry>
  
</feed>
